//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class MovieClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    movie(movieId: number): Observable<any> {
        let url_ = this.baseUrl + "/v1/Movie/{movieId}";
        if (movieId === undefined || movieId === null)
            throw new Error("The parameter 'movieId' must be defined.");
        url_ = url_.replace("{movieId}", encodeURIComponent("" + movieId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMovie(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMovie(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<any>;
        }));
    }

    protected processMovie(response: HttpResponseBase): Observable<any> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
                return _observableOf(JSON.parse(_responseText) as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class PlatformClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    platform(): Observable<Platform[]> {
        let url_ = this.baseUrl + "/v1/Platform";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPlatform(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPlatform(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Platform[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Platform[]>;
        }));
    }

    protected processPlatform(response: HttpResponseBase): Observable<Platform[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Platform.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class AgeRange implements IAgeRange {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    initialAge?: number;
    finalAge?: number;
    children?: PersonChild[] | null;

    constructor(data?: IAgeRange) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.uuid = _data["uuid"] !== undefined ? _data["uuid"] : <any>null;
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.alterDate = _data["alterDate"] ? new Date(_data["alterDate"].toString()) : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.initialAge = _data["initialAge"] !== undefined ? _data["initialAge"] : <any>null;
            this.finalAge = _data["finalAge"] !== undefined ? _data["finalAge"] : <any>null;
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(PersonChild.fromJS(item));
            }
            else {
                this.children = <any>null;
            }
        }
    }

    static fromJS(data: any): AgeRange {
        data = typeof data === 'object' ? data : {};
        let result = new AgeRange();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["uuid"] = this.uuid !== undefined ? this.uuid : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["alterDate"] = this.alterDate ? this.alterDate.toISOString() : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["initialAge"] = this.initialAge !== undefined ? this.initialAge : <any>null;
        data["finalAge"] = this.finalAge !== undefined ? this.finalAge : <any>null;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAgeRange {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    initialAge?: number;
    finalAge?: number;
    children?: PersonChild[] | null;
}

export class Comment implements IComment {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    personId?: number;
    postId?: number;
    parentComentId?: number | null;
    person?: Person;
    post?: Post;
    parentComment?: Comment;
    answers?: Comment[] | null;
    commentDetails?: CommentDetails[] | null;

    constructor(data?: IComment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.uuid = _data["uuid"] !== undefined ? _data["uuid"] : <any>null;
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.alterDate = _data["alterDate"] ? new Date(_data["alterDate"].toString()) : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.personId = _data["personId"] !== undefined ? _data["personId"] : <any>null;
            this.postId = _data["postId"] !== undefined ? _data["postId"] : <any>null;
            this.parentComentId = _data["parentComentId"] !== undefined ? _data["parentComentId"] : <any>null;
            this.person = _data["person"] ? Person.fromJS(_data["person"]) : <any>null;
            this.post = _data["post"] ? Post.fromJS(_data["post"]) : <any>null;
            this.parentComment = _data["parentComment"] ? Comment.fromJS(_data["parentComment"]) : <any>null;
            if (Array.isArray(_data["answers"])) {
                this.answers = [] as any;
                for (let item of _data["answers"])
                    this.answers!.push(Comment.fromJS(item));
            }
            else {
                this.answers = <any>null;
            }
            if (Array.isArray(_data["commentDetails"])) {
                this.commentDetails = [] as any;
                for (let item of _data["commentDetails"])
                    this.commentDetails!.push(CommentDetails.fromJS(item));
            }
            else {
                this.commentDetails = <any>null;
            }
        }
    }

    static fromJS(data: any): Comment {
        data = typeof data === 'object' ? data : {};
        let result = new Comment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["uuid"] = this.uuid !== undefined ? this.uuid : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["alterDate"] = this.alterDate ? this.alterDate.toISOString() : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["personId"] = this.personId !== undefined ? this.personId : <any>null;
        data["postId"] = this.postId !== undefined ? this.postId : <any>null;
        data["parentComentId"] = this.parentComentId !== undefined ? this.parentComentId : <any>null;
        data["person"] = this.person ? this.person.toJSON() : <any>null;
        data["post"] = this.post ? this.post.toJSON() : <any>null;
        data["parentComment"] = this.parentComment ? this.parentComment.toJSON() : <any>null;
        if (Array.isArray(this.answers)) {
            data["answers"] = [];
            for (let item of this.answers)
                data["answers"].push(item.toJSON());
        }
        if (Array.isArray(this.commentDetails)) {
            data["commentDetails"] = [];
            for (let item of this.commentDetails)
                data["commentDetails"].push(item.toJSON());
        }
        return data;
    }
}

export interface IComment {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    personId?: number;
    postId?: number;
    parentComentId?: number | null;
    person?: Person;
    post?: Post;
    parentComment?: Comment;
    answers?: Comment[] | null;
    commentDetails?: CommentDetails[] | null;
}

export class CommentDetails implements ICommentDetails {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    commentId?: number;
    text?: string | null;
    comment?: Comment;

    constructor(data?: ICommentDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.uuid = _data["uuid"] !== undefined ? _data["uuid"] : <any>null;
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.alterDate = _data["alterDate"] ? new Date(_data["alterDate"].toString()) : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.commentId = _data["commentId"] !== undefined ? _data["commentId"] : <any>null;
            this.text = _data["text"] !== undefined ? _data["text"] : <any>null;
            this.comment = _data["comment"] ? Comment.fromJS(_data["comment"]) : <any>null;
        }
    }

    static fromJS(data: any): CommentDetails {
        data = typeof data === 'object' ? data : {};
        let result = new CommentDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["uuid"] = this.uuid !== undefined ? this.uuid : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["alterDate"] = this.alterDate ? this.alterDate.toISOString() : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["commentId"] = this.commentId !== undefined ? this.commentId : <any>null;
        data["text"] = this.text !== undefined ? this.text : <any>null;
        data["comment"] = this.comment ? this.comment.toJSON() : <any>null;
        return data;
    }
}

export interface ICommentDetails {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    commentId?: number;
    text?: string | null;
    comment?: Comment;
}

export class Content implements IContent {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    name?: string | null;
    platformCategoryId?: number;
    platformCategory?: PlatformCategory;
    posts?: Post[] | null;
    contentGenre?: ContentGenre[] | null;

    constructor(data?: IContent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.uuid = _data["uuid"] !== undefined ? _data["uuid"] : <any>null;
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.alterDate = _data["alterDate"] ? new Date(_data["alterDate"].toString()) : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.platformCategoryId = _data["platformCategoryId"] !== undefined ? _data["platformCategoryId"] : <any>null;
            this.platformCategory = _data["platformCategory"] ? PlatformCategory.fromJS(_data["platformCategory"]) : <any>null;
            if (Array.isArray(_data["posts"])) {
                this.posts = [] as any;
                for (let item of _data["posts"])
                    this.posts!.push(Post.fromJS(item));
            }
            else {
                this.posts = <any>null;
            }
            if (Array.isArray(_data["contentGenre"])) {
                this.contentGenre = [] as any;
                for (let item of _data["contentGenre"])
                    this.contentGenre!.push(ContentGenre.fromJS(item));
            }
            else {
                this.contentGenre = <any>null;
            }
        }
    }

    static fromJS(data: any): Content {
        data = typeof data === 'object' ? data : {};
        let result = new Content();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["uuid"] = this.uuid !== undefined ? this.uuid : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["alterDate"] = this.alterDate ? this.alterDate.toISOString() : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["platformCategoryId"] = this.platformCategoryId !== undefined ? this.platformCategoryId : <any>null;
        data["platformCategory"] = this.platformCategory ? this.platformCategory.toJSON() : <any>null;
        if (Array.isArray(this.posts)) {
            data["posts"] = [];
            for (let item of this.posts)
                data["posts"].push(item.toJSON());
        }
        if (Array.isArray(this.contentGenre)) {
            data["contentGenre"] = [];
            for (let item of this.contentGenre)
                data["contentGenre"].push(item.toJSON());
        }
        return data;
    }
}

export interface IContent {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    name?: string | null;
    platformCategoryId?: number;
    platformCategory?: PlatformCategory;
    posts?: Post[] | null;
    contentGenre?: ContentGenre[] | null;
}

export class ContentGenre implements IContentGenre {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    contentId?: number;
    genreId?: number;
    content?: Content;
    genre?: Genre;

    constructor(data?: IContentGenre) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.uuid = _data["uuid"] !== undefined ? _data["uuid"] : <any>null;
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.alterDate = _data["alterDate"] ? new Date(_data["alterDate"].toString()) : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.contentId = _data["contentId"] !== undefined ? _data["contentId"] : <any>null;
            this.genreId = _data["genreId"] !== undefined ? _data["genreId"] : <any>null;
            this.content = _data["content"] ? Content.fromJS(_data["content"]) : <any>null;
            this.genre = _data["genre"] ? Genre.fromJS(_data["genre"]) : <any>null;
        }
    }

    static fromJS(data: any): ContentGenre {
        data = typeof data === 'object' ? data : {};
        let result = new ContentGenre();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["uuid"] = this.uuid !== undefined ? this.uuid : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["alterDate"] = this.alterDate ? this.alterDate.toISOString() : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["contentId"] = this.contentId !== undefined ? this.contentId : <any>null;
        data["genreId"] = this.genreId !== undefined ? this.genreId : <any>null;
        data["content"] = this.content ? this.content.toJSON() : <any>null;
        data["genre"] = this.genre ? this.genre.toJSON() : <any>null;
        return data;
    }
}

export interface IContentGenre {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    contentId?: number;
    genreId?: number;
    content?: Content;
    genre?: Genre;
}

export class Gender implements IGender {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    name?: string | null;
    isBinary?: boolean;
    people?: Person[] | null;
    children?: PersonChild[] | null;

    constructor(data?: IGender) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.uuid = _data["uuid"] !== undefined ? _data["uuid"] : <any>null;
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.alterDate = _data["alterDate"] ? new Date(_data["alterDate"].toString()) : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isBinary = _data["isBinary"] !== undefined ? _data["isBinary"] : <any>null;
            if (Array.isArray(_data["people"])) {
                this.people = [] as any;
                for (let item of _data["people"])
                    this.people!.push(Person.fromJS(item));
            }
            else {
                this.people = <any>null;
            }
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(PersonChild.fromJS(item));
            }
            else {
                this.children = <any>null;
            }
        }
    }

    static fromJS(data: any): Gender {
        data = typeof data === 'object' ? data : {};
        let result = new Gender();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["uuid"] = this.uuid !== undefined ? this.uuid : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["alterDate"] = this.alterDate ? this.alterDate.toISOString() : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isBinary"] = this.isBinary !== undefined ? this.isBinary : <any>null;
        if (Array.isArray(this.people)) {
            data["people"] = [];
            for (let item of this.people)
                data["people"].push(item.toJSON());
        }
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGender {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    name?: string | null;
    isBinary?: boolean;
    people?: Person[] | null;
    children?: PersonChild[] | null;
}

export class Genre implements IGenre {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    name?: string | null;
    contentGenre?: ContentGenre[] | null;

    constructor(data?: IGenre) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.uuid = _data["uuid"] !== undefined ? _data["uuid"] : <any>null;
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.alterDate = _data["alterDate"] ? new Date(_data["alterDate"].toString()) : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            if (Array.isArray(_data["contentGenre"])) {
                this.contentGenre = [] as any;
                for (let item of _data["contentGenre"])
                    this.contentGenre!.push(ContentGenre.fromJS(item));
            }
            else {
                this.contentGenre = <any>null;
            }
        }
    }

    static fromJS(data: any): Genre {
        data = typeof data === 'object' ? data : {};
        let result = new Genre();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["uuid"] = this.uuid !== undefined ? this.uuid : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["alterDate"] = this.alterDate ? this.alterDate.toISOString() : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.contentGenre)) {
            data["contentGenre"] = [];
            for (let item of this.contentGenre)
                data["contentGenre"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGenre {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    name?: string | null;
    contentGenre?: ContentGenre[] | null;
}

export class Person implements IPerson {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    username?: string | null;
    name?: string | null;
    lastName?: string | null;
    hash?: string | null;
    email?: string | null;
    genderId?: number;
    phoneCountry?: number;
    phoneArea?: string | null;
    phoneNumber?: string | null;
    password?: string | null;
    gender?: Gender;
    children?: PersonChild[] | null;
    posts?: Post[] | null;
    comments?: Comment[] | null;
    premiumPerson?: PremiumPerson[] | null;

    constructor(data?: IPerson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.uuid = _data["uuid"] !== undefined ? _data["uuid"] : <any>null;
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.alterDate = _data["alterDate"] ? new Date(_data["alterDate"].toString()) : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.hash = _data["hash"] !== undefined ? _data["hash"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.genderId = _data["genderId"] !== undefined ? _data["genderId"] : <any>null;
            this.phoneCountry = _data["phoneCountry"] !== undefined ? _data["phoneCountry"] : <any>null;
            this.phoneArea = _data["phoneArea"] !== undefined ? _data["phoneArea"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
            this.gender = _data["gender"] ? Gender.fromJS(_data["gender"]) : <any>null;
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(PersonChild.fromJS(item));
            }
            else {
                this.children = <any>null;
            }
            if (Array.isArray(_data["posts"])) {
                this.posts = [] as any;
                for (let item of _data["posts"])
                    this.posts!.push(Post.fromJS(item));
            }
            else {
                this.posts = <any>null;
            }
            if (Array.isArray(_data["comments"])) {
                this.comments = [] as any;
                for (let item of _data["comments"])
                    this.comments!.push(Comment.fromJS(item));
            }
            else {
                this.comments = <any>null;
            }
            if (Array.isArray(_data["premiumPerson"])) {
                this.premiumPerson = [] as any;
                for (let item of _data["premiumPerson"])
                    this.premiumPerson!.push(PremiumPerson.fromJS(item));
            }
            else {
                this.premiumPerson = <any>null;
            }
        }
    }

    static fromJS(data: any): Person {
        data = typeof data === 'object' ? data : {};
        let result = new Person();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["uuid"] = this.uuid !== undefined ? this.uuid : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["alterDate"] = this.alterDate ? this.alterDate.toISOString() : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["hash"] = this.hash !== undefined ? this.hash : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["genderId"] = this.genderId !== undefined ? this.genderId : <any>null;
        data["phoneCountry"] = this.phoneCountry !== undefined ? this.phoneCountry : <any>null;
        data["phoneArea"] = this.phoneArea !== undefined ? this.phoneArea : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["gender"] = this.gender ? this.gender.toJSON() : <any>null;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        if (Array.isArray(this.posts)) {
            data["posts"] = [];
            for (let item of this.posts)
                data["posts"].push(item.toJSON());
        }
        if (Array.isArray(this.comments)) {
            data["comments"] = [];
            for (let item of this.comments)
                data["comments"].push(item.toJSON());
        }
        if (Array.isArray(this.premiumPerson)) {
            data["premiumPerson"] = [];
            for (let item of this.premiumPerson)
                data["premiumPerson"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPerson {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    username?: string | null;
    name?: string | null;
    lastName?: string | null;
    hash?: string | null;
    email?: string | null;
    genderId?: number;
    phoneCountry?: number;
    phoneArea?: string | null;
    phoneNumber?: string | null;
    password?: string | null;
    gender?: Gender;
    children?: PersonChild[] | null;
    posts?: Post[] | null;
    comments?: Comment[] | null;
    premiumPerson?: PremiumPerson[] | null;
}

export class PersonChild implements IPersonChild {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    personId?: number;
    genderId?: number;
    ageRangeId?: number;
    person?: Person;
    gender?: Gender;
    ageRange?: AgeRange;

    constructor(data?: IPersonChild) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.uuid = _data["uuid"] !== undefined ? _data["uuid"] : <any>null;
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.alterDate = _data["alterDate"] ? new Date(_data["alterDate"].toString()) : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.personId = _data["personId"] !== undefined ? _data["personId"] : <any>null;
            this.genderId = _data["genderId"] !== undefined ? _data["genderId"] : <any>null;
            this.ageRangeId = _data["ageRangeId"] !== undefined ? _data["ageRangeId"] : <any>null;
            this.person = _data["person"] ? Person.fromJS(_data["person"]) : <any>null;
            this.gender = _data["gender"] ? Gender.fromJS(_data["gender"]) : <any>null;
            this.ageRange = _data["ageRange"] ? AgeRange.fromJS(_data["ageRange"]) : <any>null;
        }
    }

    static fromJS(data: any): PersonChild {
        data = typeof data === 'object' ? data : {};
        let result = new PersonChild();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["uuid"] = this.uuid !== undefined ? this.uuid : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["alterDate"] = this.alterDate ? this.alterDate.toISOString() : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["personId"] = this.personId !== undefined ? this.personId : <any>null;
        data["genderId"] = this.genderId !== undefined ? this.genderId : <any>null;
        data["ageRangeId"] = this.ageRangeId !== undefined ? this.ageRangeId : <any>null;
        data["person"] = this.person ? this.person.toJSON() : <any>null;
        data["gender"] = this.gender ? this.gender.toJSON() : <any>null;
        data["ageRange"] = this.ageRange ? this.ageRange.toJSON() : <any>null;
        return data;
    }
}

export interface IPersonChild {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    personId?: number;
    genderId?: number;
    ageRangeId?: number;
    person?: Person;
    gender?: Gender;
    ageRange?: AgeRange;
}

export class Platform implements IPlatform {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    name?: string | null;
    url?: string | null;
    platformCategories?: PlatformCategory[] | null;

    constructor(data?: IPlatform) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.uuid = _data["uuid"] !== undefined ? _data["uuid"] : <any>null;
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.alterDate = _data["alterDate"] ? new Date(_data["alterDate"].toString()) : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.url = _data["url"] !== undefined ? _data["url"] : <any>null;
            if (Array.isArray(_data["platformCategories"])) {
                this.platformCategories = [] as any;
                for (let item of _data["platformCategories"])
                    this.platformCategories!.push(PlatformCategory.fromJS(item));
            }
            else {
                this.platformCategories = <any>null;
            }
        }
    }

    static fromJS(data: any): Platform {
        data = typeof data === 'object' ? data : {};
        let result = new Platform();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["uuid"] = this.uuid !== undefined ? this.uuid : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["alterDate"] = this.alterDate ? this.alterDate.toISOString() : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["url"] = this.url !== undefined ? this.url : <any>null;
        if (Array.isArray(this.platformCategories)) {
            data["platformCategories"] = [];
            for (let item of this.platformCategories)
                data["platformCategories"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPlatform {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    name?: string | null;
    url?: string | null;
    platformCategories?: PlatformCategory[] | null;
}

export class PlatformCategory implements IPlatformCategory {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    name?: string | null;
    platformId?: number;
    platform?: Platform;
    contents?: Content[] | null;

    constructor(data?: IPlatformCategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.uuid = _data["uuid"] !== undefined ? _data["uuid"] : <any>null;
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.alterDate = _data["alterDate"] ? new Date(_data["alterDate"].toString()) : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.platformId = _data["platformId"] !== undefined ? _data["platformId"] : <any>null;
            this.platform = _data["platform"] ? Platform.fromJS(_data["platform"]) : <any>null;
            if (Array.isArray(_data["contents"])) {
                this.contents = [] as any;
                for (let item of _data["contents"])
                    this.contents!.push(Content.fromJS(item));
            }
            else {
                this.contents = <any>null;
            }
        }
    }

    static fromJS(data: any): PlatformCategory {
        data = typeof data === 'object' ? data : {};
        let result = new PlatformCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["uuid"] = this.uuid !== undefined ? this.uuid : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["alterDate"] = this.alterDate ? this.alterDate.toISOString() : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["platformId"] = this.platformId !== undefined ? this.platformId : <any>null;
        data["platform"] = this.platform ? this.platform.toJSON() : <any>null;
        if (Array.isArray(this.contents)) {
            data["contents"] = [];
            for (let item of this.contents)
                data["contents"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPlatformCategory {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    name?: string | null;
    platformId?: number;
    platform?: Platform;
    contents?: Content[] | null;
}

export class Post implements IPost {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    personId?: number;
    contentId?: number;
    person?: Person;
    content?: Content;
    postDetails?: PostDetails[] | null;
    comments?: Comment[] | null;

    constructor(data?: IPost) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.uuid = _data["uuid"] !== undefined ? _data["uuid"] : <any>null;
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.alterDate = _data["alterDate"] ? new Date(_data["alterDate"].toString()) : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.personId = _data["personId"] !== undefined ? _data["personId"] : <any>null;
            this.contentId = _data["contentId"] !== undefined ? _data["contentId"] : <any>null;
            this.person = _data["person"] ? Person.fromJS(_data["person"]) : <any>null;
            this.content = _data["content"] ? Content.fromJS(_data["content"]) : <any>null;
            if (Array.isArray(_data["postDetails"])) {
                this.postDetails = [] as any;
                for (let item of _data["postDetails"])
                    this.postDetails!.push(PostDetails.fromJS(item));
            }
            else {
                this.postDetails = <any>null;
            }
            if (Array.isArray(_data["comments"])) {
                this.comments = [] as any;
                for (let item of _data["comments"])
                    this.comments!.push(Comment.fromJS(item));
            }
            else {
                this.comments = <any>null;
            }
        }
    }

    static fromJS(data: any): Post {
        data = typeof data === 'object' ? data : {};
        let result = new Post();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["uuid"] = this.uuid !== undefined ? this.uuid : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["alterDate"] = this.alterDate ? this.alterDate.toISOString() : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["personId"] = this.personId !== undefined ? this.personId : <any>null;
        data["contentId"] = this.contentId !== undefined ? this.contentId : <any>null;
        data["person"] = this.person ? this.person.toJSON() : <any>null;
        data["content"] = this.content ? this.content.toJSON() : <any>null;
        if (Array.isArray(this.postDetails)) {
            data["postDetails"] = [];
            for (let item of this.postDetails)
                data["postDetails"].push(item.toJSON());
        }
        if (Array.isArray(this.comments)) {
            data["comments"] = [];
            for (let item of this.comments)
                data["comments"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPost {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    personId?: number;
    contentId?: number;
    person?: Person;
    content?: Content;
    postDetails?: PostDetails[] | null;
    comments?: Comment[] | null;
}

export class PostDetails implements IPostDetails {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    postId?: number;
    title?: string | null;
    text?: string | null;
    post?: Post;

    constructor(data?: IPostDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.uuid = _data["uuid"] !== undefined ? _data["uuid"] : <any>null;
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.alterDate = _data["alterDate"] ? new Date(_data["alterDate"].toString()) : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.postId = _data["postId"] !== undefined ? _data["postId"] : <any>null;
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.text = _data["text"] !== undefined ? _data["text"] : <any>null;
            this.post = _data["post"] ? Post.fromJS(_data["post"]) : <any>null;
        }
    }

    static fromJS(data: any): PostDetails {
        data = typeof data === 'object' ? data : {};
        let result = new PostDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["uuid"] = this.uuid !== undefined ? this.uuid : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["alterDate"] = this.alterDate ? this.alterDate.toISOString() : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["postId"] = this.postId !== undefined ? this.postId : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["text"] = this.text !== undefined ? this.text : <any>null;
        data["post"] = this.post ? this.post.toJSON() : <any>null;
        return data;
    }
}

export interface IPostDetails {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    postId?: number;
    title?: string | null;
    text?: string | null;
    post?: Post;
}

export class PremiumPerson implements IPremiumPerson {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    personId?: number;
    tierPlanId?: number;
    startDate?: Date;
    endDate?: Date | null;
    autoRenewal?: boolean;
    person?: Person;
    tierPlan?: TierPlan;

    constructor(data?: IPremiumPerson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.uuid = _data["uuid"] !== undefined ? _data["uuid"] : <any>null;
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.alterDate = _data["alterDate"] ? new Date(_data["alterDate"].toString()) : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.personId = _data["personId"] !== undefined ? _data["personId"] : <any>null;
            this.tierPlanId = _data["tierPlanId"] !== undefined ? _data["tierPlanId"] : <any>null;
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>null;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>null;
            this.autoRenewal = _data["autoRenewal"] !== undefined ? _data["autoRenewal"] : <any>null;
            this.person = _data["person"] ? Person.fromJS(_data["person"]) : <any>null;
            this.tierPlan = _data["tierPlan"] ? TierPlan.fromJS(_data["tierPlan"]) : <any>null;
        }
    }

    static fromJS(data: any): PremiumPerson {
        data = typeof data === 'object' ? data : {};
        let result = new PremiumPerson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["uuid"] = this.uuid !== undefined ? this.uuid : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["alterDate"] = this.alterDate ? this.alterDate.toISOString() : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["personId"] = this.personId !== undefined ? this.personId : <any>null;
        data["tierPlanId"] = this.tierPlanId !== undefined ? this.tierPlanId : <any>null;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        data["autoRenewal"] = this.autoRenewal !== undefined ? this.autoRenewal : <any>null;
        data["person"] = this.person ? this.person.toJSON() : <any>null;
        data["tierPlan"] = this.tierPlan ? this.tierPlan.toJSON() : <any>null;
        return data;
    }
}

export interface IPremiumPerson {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    personId?: number;
    tierPlanId?: number;
    startDate?: Date;
    endDate?: Date | null;
    autoRenewal?: boolean;
    person?: Person;
    tierPlan?: TierPlan;
}

export class Tier implements ITier {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    name?: string | null;
    isPremium?: boolean;
    tierPlans?: TierPlan[] | null;

    constructor(data?: ITier) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.uuid = _data["uuid"] !== undefined ? _data["uuid"] : <any>null;
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.alterDate = _data["alterDate"] ? new Date(_data["alterDate"].toString()) : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isPremium = _data["isPremium"] !== undefined ? _data["isPremium"] : <any>null;
            if (Array.isArray(_data["tierPlans"])) {
                this.tierPlans = [] as any;
                for (let item of _data["tierPlans"])
                    this.tierPlans!.push(TierPlan.fromJS(item));
            }
            else {
                this.tierPlans = <any>null;
            }
        }
    }

    static fromJS(data: any): Tier {
        data = typeof data === 'object' ? data : {};
        let result = new Tier();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["uuid"] = this.uuid !== undefined ? this.uuid : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["alterDate"] = this.alterDate ? this.alterDate.toISOString() : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isPremium"] = this.isPremium !== undefined ? this.isPremium : <any>null;
        if (Array.isArray(this.tierPlans)) {
            data["tierPlans"] = [];
            for (let item of this.tierPlans)
                data["tierPlans"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITier {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    name?: string | null;
    isPremium?: boolean;
    tierPlans?: TierPlan[] | null;
}

export class TierPlan implements ITierPlan {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    tierId?: number;
    timespanId?: number;
    price?: number;
    tier?: Tier;
    timespan?: Timespan;
    premiumPerson?: PremiumPerson[] | null;

    constructor(data?: ITierPlan) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.uuid = _data["uuid"] !== undefined ? _data["uuid"] : <any>null;
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.alterDate = _data["alterDate"] ? new Date(_data["alterDate"].toString()) : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.tierId = _data["tierId"] !== undefined ? _data["tierId"] : <any>null;
            this.timespanId = _data["timespanId"] !== undefined ? _data["timespanId"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.tier = _data["tier"] ? Tier.fromJS(_data["tier"]) : <any>null;
            this.timespan = _data["timespan"] ? Timespan.fromJS(_data["timespan"]) : <any>null;
            if (Array.isArray(_data["premiumPerson"])) {
                this.premiumPerson = [] as any;
                for (let item of _data["premiumPerson"])
                    this.premiumPerson!.push(PremiumPerson.fromJS(item));
            }
            else {
                this.premiumPerson = <any>null;
            }
        }
    }

    static fromJS(data: any): TierPlan {
        data = typeof data === 'object' ? data : {};
        let result = new TierPlan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["uuid"] = this.uuid !== undefined ? this.uuid : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["alterDate"] = this.alterDate ? this.alterDate.toISOString() : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["tierId"] = this.tierId !== undefined ? this.tierId : <any>null;
        data["timespanId"] = this.timespanId !== undefined ? this.timespanId : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["tier"] = this.tier ? this.tier.toJSON() : <any>null;
        data["timespan"] = this.timespan ? this.timespan.toJSON() : <any>null;
        if (Array.isArray(this.premiumPerson)) {
            data["premiumPerson"] = [];
            for (let item of this.premiumPerson)
                data["premiumPerson"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITierPlan {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    tierId?: number;
    timespanId?: number;
    price?: number;
    tier?: Tier;
    timespan?: Timespan;
    premiumPerson?: PremiumPerson[] | null;
}

export class Timespan implements ITimespan {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    name?: string | null;
    days?: number;
    tierPlans?: TierPlan[] | null;

    constructor(data?: ITimespan) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.uuid = _data["uuid"] !== undefined ? _data["uuid"] : <any>null;
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.alterDate = _data["alterDate"] ? new Date(_data["alterDate"].toString()) : <any>null;
            this.active = _data["active"] !== undefined ? _data["active"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.days = _data["days"] !== undefined ? _data["days"] : <any>null;
            if (Array.isArray(_data["tierPlans"])) {
                this.tierPlans = [] as any;
                for (let item of _data["tierPlans"])
                    this.tierPlans!.push(TierPlan.fromJS(item));
            }
            else {
                this.tierPlans = <any>null;
            }
        }
    }

    static fromJS(data: any): Timespan {
        data = typeof data === 'object' ? data : {};
        let result = new Timespan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["uuid"] = this.uuid !== undefined ? this.uuid : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["alterDate"] = this.alterDate ? this.alterDate.toISOString() : <any>null;
        data["active"] = this.active !== undefined ? this.active : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["days"] = this.days !== undefined ? this.days : <any>null;
        if (Array.isArray(this.tierPlans)) {
            data["tierPlans"] = [];
            for (let item of this.tierPlans)
                data["tierPlans"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITimespan {
    id?: number;
    uuid?: string | null;
    createDate?: Date;
    alterDate?: Date | null;
    active?: boolean;
    name?: string | null;
    days?: number;
    tierPlans?: TierPlan[] | null;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}